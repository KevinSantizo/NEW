{"remainingRequest":"C:\\Users\\APITECH\\Desktop\\Kevin\\NEW\\App\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\APITECH\\Desktop\\Kevin\\NEW\\App\\node_modules\\vuetify\\lib\\mixins\\validatable\\index.js","dependencies":[{"path":"C:\\Users\\APITECH\\Desktop\\Kevin\\NEW\\App\\node_modules\\vuetify\\lib\\mixins\\validatable\\index.js","mtime":1572369791413},{"path":"C:\\Users\\APITECH\\Desktop\\Kevin\\NEW\\App\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1572369744745},{"path":"C:\\Users\\APITECH\\Desktop\\Kevin\\NEW\\App\\node_modules\\babel-loader\\lib\\index.js","mtime":1572369741107}],"contextDependencies":[],"result":["import _typeof from \"C:\\\\Users\\\\APITECH\\\\Desktop\\\\Kevin\\\\NEW\\\\App\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/typeof\";\nimport \"core-js/modules/es6.number.constructor\";\n// Mixins\nimport Colorable from \"../colorable\";\nimport Themeable from \"../themeable\";\nimport { inject as RegistrableInject } from \"../registrable\"; // Utilities\n\nimport { deepEqual } from \"../../util/helpers\";\nimport { consoleError } from \"../../util/console\";\nimport mixins from \"../../util/mixins\";\n/* @vue/component */\n\nexport default mixins(Colorable, RegistrableInject('form'), Themeable).extend({\n  name: 'validatable',\n  props: {\n    disabled: Boolean,\n    error: Boolean,\n    errorCount: {\n      type: [Number, String],\n      default: 1\n    },\n    errorMessages: {\n      type: [String, Array],\n      default: function _default() {\n        return [];\n      }\n    },\n    messages: {\n      type: [String, Array],\n      default: function _default() {\n        return [];\n      }\n    },\n    readonly: Boolean,\n    rules: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n    success: Boolean,\n    successMessages: {\n      type: [String, Array],\n      default: function _default() {\n        return [];\n      }\n    },\n    validateOnBlur: Boolean,\n    value: {\n      required: false\n    }\n  },\n  data: function data() {\n    return {\n      errorBucket: [],\n      hasColor: false,\n      hasFocused: false,\n      hasInput: false,\n      isFocused: false,\n      isResetting: false,\n      lazyValue: this.value,\n      valid: false\n    };\n  },\n  computed: {\n    computedColor: function computedColor() {\n      if (this.disabled) return undefined;\n      if (this.color) return this.color; // It's assumed that if the input is on a\n      // dark background, the user will want to\n      // have a white color. If the entire app\n      // is setup to be dark, then they will\n      // like want to use their primary color\n\n      if (this.isDark && !this.appIsDark) return 'white';else return 'primary';\n    },\n    hasError: function hasError() {\n      return this.internalErrorMessages.length > 0 || this.errorBucket.length > 0 || this.error;\n    },\n    // TODO: Add logic that allows the user to enable based\n    // upon a good validation\n    hasSuccess: function hasSuccess() {\n      return this.internalSuccessMessages.length > 0 || this.success;\n    },\n    externalError: function externalError() {\n      return this.internalErrorMessages.length > 0 || this.error;\n    },\n    hasMessages: function hasMessages() {\n      return this.validationTarget.length > 0;\n    },\n    hasState: function hasState() {\n      if (this.disabled) return false;\n      return this.hasSuccess || this.shouldValidate && this.hasError;\n    },\n    internalErrorMessages: function internalErrorMessages() {\n      return this.genInternalMessages(this.errorMessages);\n    },\n    internalMessages: function internalMessages() {\n      return this.genInternalMessages(this.messages);\n    },\n    internalSuccessMessages: function internalSuccessMessages() {\n      return this.genInternalMessages(this.successMessages);\n    },\n    internalValue: {\n      get: function get() {\n        return this.lazyValue;\n      },\n      set: function set(val) {\n        this.lazyValue = val;\n        this.$emit('input', val);\n      }\n    },\n    shouldValidate: function shouldValidate() {\n      if (this.externalError) return true;\n      if (this.isResetting) return false;\n      return this.validateOnBlur ? this.hasFocused && !this.isFocused : this.hasInput || this.hasFocused;\n    },\n    validations: function validations() {\n      return this.validationTarget.slice(0, Number(this.errorCount));\n    },\n    validationState: function validationState() {\n      if (this.disabled) return undefined;\n      if (this.hasError && this.shouldValidate) return 'error';\n      if (this.hasSuccess) return 'success';\n      if (this.hasColor) return this.computedColor;\n      return undefined;\n    },\n    validationTarget: function validationTarget() {\n      if (this.internalErrorMessages.length > 0) {\n        return this.internalErrorMessages;\n      } else if (this.successMessages.length > 0) {\n        return this.internalSuccessMessages;\n      } else if (this.messages.length > 0) {\n        return this.internalMessages;\n      } else if (this.shouldValidate) {\n        return this.errorBucket;\n      } else return [];\n    }\n  },\n  watch: {\n    rules: {\n      handler: function handler(newVal, oldVal) {\n        if (deepEqual(newVal, oldVal)) return;\n        this.validate();\n      },\n      deep: true\n    },\n    internalValue: function internalValue() {\n      // If it's the first time we're setting input,\n      // mark it with hasInput\n      this.hasInput = true;\n      this.validateOnBlur || this.$nextTick(this.validate);\n    },\n    isFocused: function isFocused(val) {\n      // Should not check validation\n      // if disabled\n      if (!val && !this.disabled) {\n        this.hasFocused = true;\n        this.validateOnBlur && this.validate();\n      }\n    },\n    isResetting: function isResetting() {\n      var _this = this;\n\n      setTimeout(function () {\n        _this.hasInput = false;\n        _this.hasFocused = false;\n        _this.isResetting = false;\n\n        _this.validate();\n      }, 0);\n    },\n    hasError: function hasError(val) {\n      if (this.shouldValidate) {\n        this.$emit('update:error', val);\n      }\n    },\n    value: function value(val) {\n      this.lazyValue = val;\n    }\n  },\n  beforeMount: function beforeMount() {\n    this.validate();\n  },\n  created: function created() {\n    this.form && this.form.register(this);\n  },\n  beforeDestroy: function beforeDestroy() {\n    this.form && this.form.unregister(this);\n  },\n  methods: {\n    genInternalMessages: function genInternalMessages(messages) {\n      if (!messages) return [];else if (Array.isArray(messages)) return messages;else return [messages];\n    },\n\n    /** @public */\n    reset: function reset() {\n      this.isResetting = true;\n      this.internalValue = Array.isArray(this.internalValue) ? [] : undefined;\n    },\n\n    /** @public */\n    resetValidation: function resetValidation() {\n      this.isResetting = true;\n    },\n\n    /** @public */\n    validate: function validate() {\n      var force = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var value = arguments.length > 1 ? arguments[1] : undefined;\n      var errorBucket = [];\n      value = value || this.internalValue;\n      if (force) this.hasInput = this.hasFocused = true;\n\n      for (var index = 0; index < this.rules.length; index++) {\n        var rule = this.rules[index];\n        var valid = typeof rule === 'function' ? rule(value) : rule;\n\n        if (typeof valid === 'string') {\n          errorBucket.push(valid);\n        } else if (typeof valid !== 'boolean') {\n          consoleError(\"Rules should return a string or boolean, received '\".concat(_typeof(valid), \"' instead\"), this);\n        }\n      }\n\n      this.errorBucket = errorBucket;\n      this.valid = errorBucket.length === 0;\n      return this.valid;\n    }\n  }\n});",{"version":3,"sources":["C:/Users/APITECH/Desktop/Kevin/NEW/App/node_modules/vuetify/lib/mixins/validatable/index.js"],"names":["Colorable","Themeable","inject","RegistrableInject","deepEqual","consoleError","mixins","extend","name","props","disabled","Boolean","error","errorCount","type","Number","String","default","errorMessages","Array","messages","readonly","rules","success","successMessages","validateOnBlur","value","required","data","errorBucket","hasColor","hasFocused","hasInput","isFocused","isResetting","lazyValue","valid","computed","computedColor","undefined","color","isDark","appIsDark","hasError","internalErrorMessages","length","hasSuccess","internalSuccessMessages","externalError","hasMessages","validationTarget","hasState","shouldValidate","genInternalMessages","internalMessages","internalValue","get","set","val","$emit","validations","slice","validationState","watch","handler","newVal","oldVal","validate","deep","$nextTick","setTimeout","beforeMount","created","form","register","beforeDestroy","unregister","methods","isArray","reset","resetValidation","force","index","rule","push"],"mappings":";;AAAA;AACA,OAAOA,SAAP;AACA,OAAOC,SAAP;AACA,SAASC,MAAM,IAAIC,iBAAnB,yB,CAA8D;;AAE9D,SAASC,SAAT;AACA,SAASC,YAAT;AACA,OAAOC,MAAP;AACA;;AAEA,eAAeA,MAAM,CAACN,SAAD,EAAYG,iBAAiB,CAAC,MAAD,CAA7B,EAAuCF,SAAvC,CAAN,CAAwDM,MAAxD,CAA+D;AAC5EC,EAAAA,IAAI,EAAE,aADsE;AAE5EC,EAAAA,KAAK,EAAE;AACLC,IAAAA,QAAQ,EAAEC,OADL;AAELC,IAAAA,KAAK,EAAED,OAFF;AAGLE,IAAAA,UAAU,EAAE;AACVC,MAAAA,IAAI,EAAE,CAACC,MAAD,EAASC,MAAT,CADI;AAEVC,MAAAA,OAAO,EAAE;AAFC,KAHP;AAOLC,IAAAA,aAAa,EAAE;AACbJ,MAAAA,IAAI,EAAE,CAACE,MAAD,EAASG,KAAT,CADO;AAEbF,MAAAA,OAAO,EAAE;AAAA,eAAM,EAAN;AAAA;AAFI,KAPV;AAWLG,IAAAA,QAAQ,EAAE;AACRN,MAAAA,IAAI,EAAE,CAACE,MAAD,EAASG,KAAT,CADE;AAERF,MAAAA,OAAO,EAAE;AAAA,eAAM,EAAN;AAAA;AAFD,KAXL;AAeLI,IAAAA,QAAQ,EAAEV,OAfL;AAgBLW,IAAAA,KAAK,EAAE;AACLR,MAAAA,IAAI,EAAEK,KADD;AAELF,MAAAA,OAAO,EAAE;AAAA,eAAM,EAAN;AAAA;AAFJ,KAhBF;AAoBLM,IAAAA,OAAO,EAAEZ,OApBJ;AAqBLa,IAAAA,eAAe,EAAE;AACfV,MAAAA,IAAI,EAAE,CAACE,MAAD,EAASG,KAAT,CADS;AAEfF,MAAAA,OAAO,EAAE;AAAA,eAAM,EAAN;AAAA;AAFM,KArBZ;AAyBLQ,IAAAA,cAAc,EAAEd,OAzBX;AA0BLe,IAAAA,KAAK,EAAE;AACLC,MAAAA,QAAQ,EAAE;AADL;AA1BF,GAFqE;AAiC5EC,EAAAA,IAjC4E,kBAiCrE;AACL,WAAO;AACLC,MAAAA,WAAW,EAAE,EADR;AAELC,MAAAA,QAAQ,EAAE,KAFL;AAGLC,MAAAA,UAAU,EAAE,KAHP;AAILC,MAAAA,QAAQ,EAAE,KAJL;AAKLC,MAAAA,SAAS,EAAE,KALN;AAMLC,MAAAA,WAAW,EAAE,KANR;AAOLC,MAAAA,SAAS,EAAE,KAAKT,KAPX;AAQLU,MAAAA,KAAK,EAAE;AARF,KAAP;AAUD,GA5C2E;AA8C5EC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,aADQ,2BACQ;AACd,UAAI,KAAK5B,QAAT,EAAmB,OAAO6B,SAAP;AACnB,UAAI,KAAKC,KAAT,EAAgB,OAAO,KAAKA,KAAZ,CAFF,CAEqB;AACnC;AACA;AACA;AACA;;AAEA,UAAI,KAAKC,MAAL,IAAe,CAAC,KAAKC,SAAzB,EAAoC,OAAO,OAAP,CAApC,KAAwD,OAAO,SAAP;AACzD,KAVO;AAYRC,IAAAA,QAZQ,sBAYG;AACT,aAAO,KAAKC,qBAAL,CAA2BC,MAA3B,GAAoC,CAApC,IAAyC,KAAKhB,WAAL,CAAiBgB,MAAjB,GAA0B,CAAnE,IAAwE,KAAKjC,KAApF;AACD,KAdO;AAgBR;AACA;AACAkC,IAAAA,UAlBQ,wBAkBK;AACX,aAAO,KAAKC,uBAAL,CAA6BF,MAA7B,GAAsC,CAAtC,IAA2C,KAAKtB,OAAvD;AACD,KApBO;AAsBRyB,IAAAA,aAtBQ,2BAsBQ;AACd,aAAO,KAAKJ,qBAAL,CAA2BC,MAA3B,GAAoC,CAApC,IAAyC,KAAKjC,KAArD;AACD,KAxBO;AA0BRqC,IAAAA,WA1BQ,yBA0BM;AACZ,aAAO,KAAKC,gBAAL,CAAsBL,MAAtB,GAA+B,CAAtC;AACD,KA5BO;AA8BRM,IAAAA,QA9BQ,sBA8BG;AACT,UAAI,KAAKzC,QAAT,EAAmB,OAAO,KAAP;AACnB,aAAO,KAAKoC,UAAL,IAAmB,KAAKM,cAAL,IAAuB,KAAKT,QAAtD;AACD,KAjCO;AAmCRC,IAAAA,qBAnCQ,mCAmCgB;AACtB,aAAO,KAAKS,mBAAL,CAAyB,KAAKnC,aAA9B,CAAP;AACD,KArCO;AAuCRoC,IAAAA,gBAvCQ,8BAuCW;AACjB,aAAO,KAAKD,mBAAL,CAAyB,KAAKjC,QAA9B,CAAP;AACD,KAzCO;AA2CR2B,IAAAA,uBA3CQ,qCA2CkB;AACxB,aAAO,KAAKM,mBAAL,CAAyB,KAAK7B,eAA9B,CAAP;AACD,KA7CO;AA+CR+B,IAAAA,aAAa,EAAE;AACbC,MAAAA,GADa,iBACP;AACJ,eAAO,KAAKrB,SAAZ;AACD,OAHY;AAKbsB,MAAAA,GALa,eAKTC,GALS,EAKJ;AACP,aAAKvB,SAAL,GAAiBuB,GAAjB;AACA,aAAKC,KAAL,CAAW,OAAX,EAAoBD,GAApB;AACD;AARY,KA/CP;AA2DRN,IAAAA,cA3DQ,4BA2DS;AACf,UAAI,KAAKJ,aAAT,EAAwB,OAAO,IAAP;AACxB,UAAI,KAAKd,WAAT,EAAsB,OAAO,KAAP;AACtB,aAAO,KAAKT,cAAL,GAAsB,KAAKM,UAAL,IAAmB,CAAC,KAAKE,SAA/C,GAA2D,KAAKD,QAAL,IAAiB,KAAKD,UAAxF;AACD,KA/DO;AAiER6B,IAAAA,WAjEQ,yBAiEM;AACZ,aAAO,KAAKV,gBAAL,CAAsBW,KAAtB,CAA4B,CAA5B,EAA+B9C,MAAM,CAAC,KAAKF,UAAN,CAArC,CAAP;AACD,KAnEO;AAqERiD,IAAAA,eArEQ,6BAqEU;AAChB,UAAI,KAAKpD,QAAT,EAAmB,OAAO6B,SAAP;AACnB,UAAI,KAAKI,QAAL,IAAiB,KAAKS,cAA1B,EAA0C,OAAO,OAAP;AAC1C,UAAI,KAAKN,UAAT,EAAqB,OAAO,SAAP;AACrB,UAAI,KAAKhB,QAAT,EAAmB,OAAO,KAAKQ,aAAZ;AACnB,aAAOC,SAAP;AACD,KA3EO;AA6ERW,IAAAA,gBA7EQ,8BA6EW;AACjB,UAAI,KAAKN,qBAAL,CAA2BC,MAA3B,GAAoC,CAAxC,EAA2C;AACzC,eAAO,KAAKD,qBAAZ;AACD,OAFD,MAEO,IAAI,KAAKpB,eAAL,CAAqBqB,MAArB,GAA8B,CAAlC,EAAqC;AAC1C,eAAO,KAAKE,uBAAZ;AACD,OAFM,MAEA,IAAI,KAAK3B,QAAL,CAAcyB,MAAd,GAAuB,CAA3B,EAA8B;AACnC,eAAO,KAAKS,gBAAZ;AACD,OAFM,MAEA,IAAI,KAAKF,cAAT,EAAyB;AAC9B,eAAO,KAAKvB,WAAZ;AACD,OAFM,MAEA,OAAO,EAAP;AACR;AAvFO,GA9CkE;AAwI5EkC,EAAAA,KAAK,EAAE;AACLzC,IAAAA,KAAK,EAAE;AACL0C,MAAAA,OADK,mBACGC,MADH,EACWC,MADX,EACmB;AACtB,YAAI9D,SAAS,CAAC6D,MAAD,EAASC,MAAT,CAAb,EAA+B;AAC/B,aAAKC,QAAL;AACD,OAJI;AAMLC,MAAAA,IAAI,EAAE;AAND,KADF;AAULb,IAAAA,aAVK,2BAUW;AACd;AACA;AACA,WAAKvB,QAAL,GAAgB,IAAhB;AACA,WAAKP,cAAL,IAAuB,KAAK4C,SAAL,CAAe,KAAKF,QAApB,CAAvB;AACD,KAfI;AAiBLlC,IAAAA,SAjBK,qBAiBKyB,GAjBL,EAiBU;AACb;AACA;AACA,UAAI,CAACA,GAAD,IAAQ,CAAC,KAAKhD,QAAlB,EAA4B;AAC1B,aAAKqB,UAAL,GAAkB,IAAlB;AACA,aAAKN,cAAL,IAAuB,KAAK0C,QAAL,EAAvB;AACD;AACF,KAxBI;AA0BLjC,IAAAA,WA1BK,yBA0BS;AAAA;;AACZoC,MAAAA,UAAU,CAAC,YAAM;AACf,QAAA,KAAI,CAACtC,QAAL,GAAgB,KAAhB;AACA,QAAA,KAAI,CAACD,UAAL,GAAkB,KAAlB;AACA,QAAA,KAAI,CAACG,WAAL,GAAmB,KAAnB;;AACA,QAAA,KAAI,CAACiC,QAAL;AACD,OALS,EAKP,CALO,CAAV;AAMD,KAjCI;AAmCLxB,IAAAA,QAnCK,oBAmCIe,GAnCJ,EAmCS;AACZ,UAAI,KAAKN,cAAT,EAAyB;AACvB,aAAKO,KAAL,CAAW,cAAX,EAA2BD,GAA3B;AACD;AACF,KAvCI;AAyCLhC,IAAAA,KAzCK,iBAyCCgC,GAzCD,EAyCM;AACT,WAAKvB,SAAL,GAAiBuB,GAAjB;AACD;AA3CI,GAxIqE;AAuL5Ea,EAAAA,WAvL4E,yBAuL9D;AACZ,SAAKJ,QAAL;AACD,GAzL2E;AA2L5EK,EAAAA,OA3L4E,qBA2LlE;AACR,SAAKC,IAAL,IAAa,KAAKA,IAAL,CAAUC,QAAV,CAAmB,IAAnB,CAAb;AACD,GA7L2E;AA+L5EC,EAAAA,aA/L4E,2BA+L5D;AACd,SAAKF,IAAL,IAAa,KAAKA,IAAL,CAAUG,UAAV,CAAqB,IAArB,CAAb;AACD,GAjM2E;AAmM5EC,EAAAA,OAAO,EAAE;AACPxB,IAAAA,mBADO,+BACajC,QADb,EACuB;AAC5B,UAAI,CAACA,QAAL,EAAe,OAAO,EAAP,CAAf,KAA8B,IAAID,KAAK,CAAC2D,OAAN,CAAc1D,QAAd,CAAJ,EAA6B,OAAOA,QAAP,CAA7B,KAAkD,OAAO,CAACA,QAAD,CAAP;AACjF,KAHM;;AAKP;AACA2D,IAAAA,KANO,mBAMC;AACN,WAAK7C,WAAL,GAAmB,IAAnB;AACA,WAAKqB,aAAL,GAAqBpC,KAAK,CAAC2D,OAAN,CAAc,KAAKvB,aAAnB,IAAoC,EAApC,GAAyChB,SAA9D;AACD,KATM;;AAWP;AACAyC,IAAAA,eAZO,6BAYW;AAChB,WAAK9C,WAAL,GAAmB,IAAnB;AACD,KAdM;;AAgBP;AACAiC,IAAAA,QAjBO,sBAiBwB;AAAA,UAAtBc,KAAsB,uEAAd,KAAc;AAAA,UAAPvD,KAAO;AAC7B,UAAMG,WAAW,GAAG,EAApB;AACAH,MAAAA,KAAK,GAAGA,KAAK,IAAI,KAAK6B,aAAtB;AACA,UAAI0B,KAAJ,EAAW,KAAKjD,QAAL,GAAgB,KAAKD,UAAL,GAAkB,IAAlC;;AAEX,WAAK,IAAImD,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAG,KAAK5D,KAAL,CAAWuB,MAAvC,EAA+CqC,KAAK,EAApD,EAAwD;AACtD,YAAMC,IAAI,GAAG,KAAK7D,KAAL,CAAW4D,KAAX,CAAb;AACA,YAAM9C,KAAK,GAAG,OAAO+C,IAAP,KAAgB,UAAhB,GAA6BA,IAAI,CAACzD,KAAD,CAAjC,GAA2CyD,IAAzD;;AAEA,YAAI,OAAO/C,KAAP,KAAiB,QAArB,EAA+B;AAC7BP,UAAAA,WAAW,CAACuD,IAAZ,CAAiBhD,KAAjB;AACD,SAFD,MAEO,IAAI,OAAOA,KAAP,KAAiB,SAArB,EAAgC;AACrC/B,UAAAA,YAAY,sEAA8D+B,KAA9D,iBAAgF,IAAhF,CAAZ;AACD;AACF;;AAED,WAAKP,WAAL,GAAmBA,WAAnB;AACA,WAAKO,KAAL,GAAaP,WAAW,CAACgB,MAAZ,KAAuB,CAApC;AACA,aAAO,KAAKT,KAAZ;AACD;AApCM;AAnMmE,CAA/D,CAAf","sourcesContent":["// Mixins\r\nimport Colorable from '../colorable';\r\nimport Themeable from '../themeable';\r\nimport { inject as RegistrableInject } from '../registrable'; // Utilities\r\n\r\nimport { deepEqual } from '../../util/helpers';\r\nimport { consoleError } from '../../util/console';\r\nimport mixins from '../../util/mixins';\r\n/* @vue/component */\r\n\r\nexport default mixins(Colorable, RegistrableInject('form'), Themeable).extend({\r\n  name: 'validatable',\r\n  props: {\r\n    disabled: Boolean,\r\n    error: Boolean,\r\n    errorCount: {\r\n      type: [Number, String],\r\n      default: 1\r\n    },\r\n    errorMessages: {\r\n      type: [String, Array],\r\n      default: () => []\r\n    },\r\n    messages: {\r\n      type: [String, Array],\r\n      default: () => []\r\n    },\r\n    readonly: Boolean,\r\n    rules: {\r\n      type: Array,\r\n      default: () => []\r\n    },\r\n    success: Boolean,\r\n    successMessages: {\r\n      type: [String, Array],\r\n      default: () => []\r\n    },\r\n    validateOnBlur: Boolean,\r\n    value: {\r\n      required: false\r\n    }\r\n  },\r\n\r\n  data() {\r\n    return {\r\n      errorBucket: [],\r\n      hasColor: false,\r\n      hasFocused: false,\r\n      hasInput: false,\r\n      isFocused: false,\r\n      isResetting: false,\r\n      lazyValue: this.value,\r\n      valid: false\r\n    };\r\n  },\r\n\r\n  computed: {\r\n    computedColor() {\r\n      if (this.disabled) return undefined;\r\n      if (this.color) return this.color; // It's assumed that if the input is on a\r\n      // dark background, the user will want to\r\n      // have a white color. If the entire app\r\n      // is setup to be dark, then they will\r\n      // like want to use their primary color\r\n\r\n      if (this.isDark && !this.appIsDark) return 'white';else return 'primary';\r\n    },\r\n\r\n    hasError() {\r\n      return this.internalErrorMessages.length > 0 || this.errorBucket.length > 0 || this.error;\r\n    },\r\n\r\n    // TODO: Add logic that allows the user to enable based\r\n    // upon a good validation\r\n    hasSuccess() {\r\n      return this.internalSuccessMessages.length > 0 || this.success;\r\n    },\r\n\r\n    externalError() {\r\n      return this.internalErrorMessages.length > 0 || this.error;\r\n    },\r\n\r\n    hasMessages() {\r\n      return this.validationTarget.length > 0;\r\n    },\r\n\r\n    hasState() {\r\n      if (this.disabled) return false;\r\n      return this.hasSuccess || this.shouldValidate && this.hasError;\r\n    },\r\n\r\n    internalErrorMessages() {\r\n      return this.genInternalMessages(this.errorMessages);\r\n    },\r\n\r\n    internalMessages() {\r\n      return this.genInternalMessages(this.messages);\r\n    },\r\n\r\n    internalSuccessMessages() {\r\n      return this.genInternalMessages(this.successMessages);\r\n    },\r\n\r\n    internalValue: {\r\n      get() {\r\n        return this.lazyValue;\r\n      },\r\n\r\n      set(val) {\r\n        this.lazyValue = val;\r\n        this.$emit('input', val);\r\n      }\r\n\r\n    },\r\n\r\n    shouldValidate() {\r\n      if (this.externalError) return true;\r\n      if (this.isResetting) return false;\r\n      return this.validateOnBlur ? this.hasFocused && !this.isFocused : this.hasInput || this.hasFocused;\r\n    },\r\n\r\n    validations() {\r\n      return this.validationTarget.slice(0, Number(this.errorCount));\r\n    },\r\n\r\n    validationState() {\r\n      if (this.disabled) return undefined;\r\n      if (this.hasError && this.shouldValidate) return 'error';\r\n      if (this.hasSuccess) return 'success';\r\n      if (this.hasColor) return this.computedColor;\r\n      return undefined;\r\n    },\r\n\r\n    validationTarget() {\r\n      if (this.internalErrorMessages.length > 0) {\r\n        return this.internalErrorMessages;\r\n      } else if (this.successMessages.length > 0) {\r\n        return this.internalSuccessMessages;\r\n      } else if (this.messages.length > 0) {\r\n        return this.internalMessages;\r\n      } else if (this.shouldValidate) {\r\n        return this.errorBucket;\r\n      } else return [];\r\n    }\r\n\r\n  },\r\n  watch: {\r\n    rules: {\r\n      handler(newVal, oldVal) {\r\n        if (deepEqual(newVal, oldVal)) return;\r\n        this.validate();\r\n      },\r\n\r\n      deep: true\r\n    },\r\n\r\n    internalValue() {\r\n      // If it's the first time we're setting input,\r\n      // mark it with hasInput\r\n      this.hasInput = true;\r\n      this.validateOnBlur || this.$nextTick(this.validate);\r\n    },\r\n\r\n    isFocused(val) {\r\n      // Should not check validation\r\n      // if disabled\r\n      if (!val && !this.disabled) {\r\n        this.hasFocused = true;\r\n        this.validateOnBlur && this.validate();\r\n      }\r\n    },\r\n\r\n    isResetting() {\r\n      setTimeout(() => {\r\n        this.hasInput = false;\r\n        this.hasFocused = false;\r\n        this.isResetting = false;\r\n        this.validate();\r\n      }, 0);\r\n    },\r\n\r\n    hasError(val) {\r\n      if (this.shouldValidate) {\r\n        this.$emit('update:error', val);\r\n      }\r\n    },\r\n\r\n    value(val) {\r\n      this.lazyValue = val;\r\n    }\r\n\r\n  },\r\n\r\n  beforeMount() {\r\n    this.validate();\r\n  },\r\n\r\n  created() {\r\n    this.form && this.form.register(this);\r\n  },\r\n\r\n  beforeDestroy() {\r\n    this.form && this.form.unregister(this);\r\n  },\r\n\r\n  methods: {\r\n    genInternalMessages(messages) {\r\n      if (!messages) return [];else if (Array.isArray(messages)) return messages;else return [messages];\r\n    },\r\n\r\n    /** @public */\r\n    reset() {\r\n      this.isResetting = true;\r\n      this.internalValue = Array.isArray(this.internalValue) ? [] : undefined;\r\n    },\r\n\r\n    /** @public */\r\n    resetValidation() {\r\n      this.isResetting = true;\r\n    },\r\n\r\n    /** @public */\r\n    validate(force = false, value) {\r\n      const errorBucket = [];\r\n      value = value || this.internalValue;\r\n      if (force) this.hasInput = this.hasFocused = true;\r\n\r\n      for (let index = 0; index < this.rules.length; index++) {\r\n        const rule = this.rules[index];\r\n        const valid = typeof rule === 'function' ? rule(value) : rule;\r\n\r\n        if (typeof valid === 'string') {\r\n          errorBucket.push(valid);\r\n        } else if (typeof valid !== 'boolean') {\r\n          consoleError(`Rules should return a string or boolean, received '${typeof valid}' instead`, this);\r\n        }\r\n      }\r\n\r\n      this.errorBucket = errorBucket;\r\n      this.valid = errorBucket.length === 0;\r\n      return this.valid;\r\n    }\r\n\r\n  }\r\n});\r\n//# sourceMappingURL=index.js.map"]}]}